import React, { useState } from 'react';
import { Plus, Trash2, Check } from 'lucide-react';

function App() {
  const [task, setTask] = useState('');
  const [tasks, setTasks] = useState([]);

  const addTask = () => {
    if (task.trim()) {
      setTasks([...tasks, { id: Date.now(), text: task, completed: false }]);
      setTask('');
    }
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  const toggleTask = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      addTask();
    }
  };

  return (
    <div
      className="w-full h-screen flex justify-center items-center bg-cover bg-no-repeat relative"
      style={{
        backgroundImage: `url('https://cdn.dribbble.com/userupload/9614848/file/original-1d1f12e724e6ad957308f40b6434cbfa.jpg?resize=1600x900&vertical=center')`,
      }}
    >
      {/* Todo Card */}
      <div className="absolute right-8 top-8 bottom-8 w-full max-w-md border border-gray-300 rounded-lg p-6 backdrop-blur-sm bg-white/30 shadow-xl">

        {/* Header */}
        <div className="relative mb-6">
          <h1 className="text-center text-2xl font-semibold text-gray-800">To-do List</h1>
          <div className="text-center text-sm text-gray-600 mt-1">
            {tasks.length} {tasks.length === 1 ? 'task' : 'tasks'}
          </div>
        </div>

        {/* Input Bar */}
        <div className="flex items-center gap-2 mb-6">
          <input
            type="text"
            placeholder="Type your task here..."
            value={task}
            onChange={(e) => setTask(e.target.value)}
            onKeyPress={handleKeyPress}
            className="flex-1 p-3 rounded-lg border border-gray-300 outline-none focus:ring-2 focus:ring-blue-400 backdrop-blur-md bg-white/70 placeholder-gray-600 text-gray-800"
          />
          <button 
            onClick={addTask}
            className="p-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200 shadow-md"
          >
            <Plus size={20} />
          </button>
        </div>

        {/* Task List */}
        <div className="space-y-2 max-h-96 overflow-y-auto">
          {tasks.length === 0 ? (
            <div className="text-center text-gray-600 py-8">
              <div className="text-4xl mb-2">📝</div>
              <p>No tasks yet. Add one above!</p>
            </div>
          ) : (
            tasks.map((taskItem) => (
              <div
                key={taskItem.id}
                className={`flex items-center gap-3 p-3 rounded-lg backdrop-blur-md transition-all duration-200 ${
                  taskItem.completed
                    ? 'bg-green-100/50 border border-green-300'
                    : 'bg-white/60 border border-gray-300'
                }`}
              >
                <button
                  onClick={() => toggleTask(taskItem.id)}
                  className={`flex-shrink-0 w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors duration-200 ${
                    taskItem.completed
                      ? 'bg-green-500 border-green-500 text-white'
                      : 'border-gray-400 hover:border-green-400'
                  }`}
                >
                  {taskItem.completed && <Check size={14} />}
                </button>
                
                <span
                  className={`flex-1 text-gray-800 ${
                    taskItem.completed ? 'line-through opacity-60' : ''
                  }`}
                >
                  {taskItem.text}
                </span>
                
                <button
                  onClick={() => deleteTask(taskItem.id)}
                  className="flex-shrink-0 p-1 text-red-500 hover:text-red-700 hover:bg-red-100/50 rounded transition-colors duration-200"
                >
                  <Trash2 size={16} />
                </button>
              </div>
            ))
          )}
        </div>

        {/* Stats */}
        {tasks.length > 0 && (
          <div className="mt-4 pt-4 border-t border-gray-300/50">
            <div className="flex justify-between text-sm text-gray-700">
              <span>Completed: {tasks.filter(t => t.completed).length}</span>
              <span>Remaining: {tasks.filter(t => !t.completed).length}</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;